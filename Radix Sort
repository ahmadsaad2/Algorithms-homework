//ahmadsaad_12027912
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
    Scanner  scan =new Scanner(System.in);
        int size=scan.nextInt();
        int []array=new int[size];
        for(int i=0;i<size;i++){
            array[i]=scan.nextInt();
        }
        int n = number(getMax(array, size));
       radix(array, size, n);
        printarray(array);
        scan.close();
    }
      public static void printarray(int[] arr) {
        System.out.print("[");
        for (int i = 0; i < arr.length; i++) {
        System.out.print(arr[i]);
         if (i != arr.length - 1) {
        System.out.print(",");
        }
        }
        System.out.print("]");
    }
     public static int number(int num) {
        int count = 0;
        while (num != 0) {
            num /= 10;
            count++;
        }
        return count;
    }
     public static int getMax(int[] arr, int size) {
        int max = arr[0];
        for (int i = 1; i < size; i++)
            if (arr[i] > max)
                max = arr[i];
        return max;
    }
    public static void radix(int[] arr, int size, int n) {
      int mod=1;
        while(n>=0){
            int[]pass=new int[size];
            for(int i=0;i<size;i++){
                boolean flag=false;
                int key=(arr[i]/mod)%10;
                if(i == 0){
                    pass[i]=arr[i];
                }
                for(int x=i-1;x>=0;x--){
                    if(flag)
                        break;

                int tmp=(pass[x]/mod)%10;
                if (key < tmp) {
                int t = pass[x];
                pass[x] = arr[i];
                pass[x + 1] = t;}
                else {
                pass[x + 1] = arr[i];
            flag = true;
                    }
                }
            }

            for (int i = 0; i < size; i++) {
                arr[i] = pass[i];
            }

            mod = mod * 10;
            n--;
        }
                }
}
